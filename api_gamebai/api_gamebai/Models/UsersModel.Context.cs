//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace api_gamebai.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Databasegamebai : DbContext
    {
        public Databasegamebai()
            : base("name=Databasegamebai")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<player> players { get; set; }
        public virtual DbSet<infoplayer> infoplayers { get; set; }
        public virtual DbSet<player_key> player_key { get; set; }
        public virtual DbSet<history_login> history_login { get; set; }
    
        public virtual int congTien(Nullable<decimal> amount, Nullable<int> id)
        {
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("congTien", amountParameter, idParameter);
        }
    
        public virtual int sendmessage(Nullable<int> playerIDsend, Nullable<int> playerIDrecive, string message)
        {
            var playerIDsendParameter = playerIDsend.HasValue ?
                new ObjectParameter("playerIDsend", playerIDsend) :
                new ObjectParameter("playerIDsend", typeof(int));
    
            var playerIDreciveParameter = playerIDrecive.HasValue ?
                new ObjectParameter("playerIDrecive", playerIDrecive) :
                new ObjectParameter("playerIDrecive", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sendmessage", playerIDsendParameter, playerIDreciveParameter, messageParameter);
        }
    
        public virtual ObjectResult<LoadListFriend_Result> LoadListFriend(Nullable<int> playerID)
        {
            var playerIDParameter = playerID.HasValue ?
                new ObjectParameter("playerID", playerID) :
                new ObjectParameter("playerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoadListFriend_Result>("LoadListFriend", playerIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> getID(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getID", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<FindKeyUser_Result> FindKeyUser(string keyUser)
        {
            var keyUserParameter = keyUser != null ?
                new ObjectParameter("keyUser", keyUser) :
                new ObjectParameter("keyUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindKeyUser_Result>("FindKeyUser", keyUserParameter);
        }
    
        public virtual ObjectResult<LoginData_Result> LoginData(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoginData_Result>("LoginData", usernameParameter, passwordParameter);
        }
    }
}
